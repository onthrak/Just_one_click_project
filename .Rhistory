install.packages("swirl")
library(swirl)
Kacper
swirl()
getwd()
ls()
x <- 9
ls()
dri()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2") ; file.path("testdir2", "testdir3")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = 1)
unlink("testdir2", recursive = TRUE)
setwd()
old.dir
setwd(old.dir)
unlink("testdir1")
unlink("testdir", recursive= TRUE)
savehistory("C:/Users/Anonymous/Desktop/R/R Programming/swirl2.Rhistory")
library(swirl)
swirl()
swirl()
skip()
my_mean <- function(my_vector) { sum(my_vector)/length(my_vector)
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
nxt()
my_mean <- function(my_vector) { sum(my_vector)/length(my_vector)}
submit()
my_mean <- function(my_vector) { x=sum(my_vector)/length(my_vector)}
submit()
my_mean
bye()
my_mean <- function(my_vector) { x=sum(my_vector)/length(my_vector)}
submit()
my_mean
my_mean(c(2,5,6))
args(my_mean)
my_mean <- function(my_vector) { sum(my_vector)/length(my_vector)}
submit()
args(my_mean)
my_mean <- function(my_vector) { x=sum(my_vector); y=length(my_vector) ; x/y}
submit()
args(my_mean)
my_mean <- function(my_vector) { x=sum(my_vector); y=length(my_vector) ; return(x/y)}
submit()
args(my_mean)
my_mean <- function(my_vector) { x <- sum(my_vector); y <- length(my_vector) ; return(x/y)}
submit()
args(my_mean)
dod = function(x, y) {x+y}
submit()
args(dod)
dod(3,5)
my_mean(c(4,5,6))
swirl()
my_mean <- function(my_vector) { x <- sum(my_vector); y <- length(my_vector) ; return(x/y)}
submit()
args(my_mean)
skip()
skip()
bye()
swirl()
x
x[1:10}]
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y >0]
x[x>0]
x[!is.na(x) & x > 0 ]
x[c(3,5,7)]
x[0]
x[300]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- vect[c(1,2,3)]
vect2 <- vect[unnamed(vext)]
vect2 <- vect[-names(vect)]
vect2 <- vect[!names(vect)]
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[, c(11,12,13,14,15,16,17)]
flag_colors<-flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, meaN)
sapply(flag_colors, mean)
flag_shapes<-flags[, 19:23]
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6,))
unique(c(3,4,5,5,5,6,6))
unique_valls<-lapply(flags, unique)
unique_vals<-lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class
)
vapply(flags, class, numeric(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
history
save
save(history)
clear
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 10
if(x > 5) {
x <- 0
}
x <- 1:10
while (x > 5) {
x <- 0
}
<- 1:10
if (x > 5) {
x <- 0
else
x==2
}
x <- 1:10
if (x > 5) {
x <- 0;
else
x==2
}
x <- 1:10
if (x > 5) {
x <- 0;
x==2
}
x <- 1:10
if (x > 5) {
x <- 0;
else
x=2
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
View(flags)
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
help ifelse
help else
help (elseif)
help (ifelse)
x=90
y=45
if (x==90) {k=1} elseif (y==46) {k=2} else k=3
if (x==90) {k=1} else (y==46) {k=2} else k=3
if (x==90) {k=1}
if (x==90) {k=1} else (y==46) {k=2} else k=3
if (x==90) {k=1} ifelse (y==46) {k=2} else k=3
if (x==90) {k=1} if (y==46) {k=2} else k=3
if (x==90) {k=1}; if (y==46) {k=2} else k=3
if (x==90) {k=1}; if (y==45) {k=2} else k=3
if (x==90) {k=1} else if (y==45) {k=2} else k=3
if (x==92) {k=1} else if (y==45) {k=2} else k=3
if (x==92) {k=1} else if (y==47) {k=2} else k=3
library("gdata", lib.loc="d:/Program Files/R/R-3.1.3/library")
library("gtools", lib.loc="d:/Program Files/R/R-3.1.3/library")
source('C:/Users/Anonymous/Desktop/R/Just_one_click_project/r_functions/mean_for_all_variables.R')
install.packages("gdata")
source('C:/Users/Anonymous/Desktop/R/Just_one_click_project/r_functions/mean_for_all_variables.R')
install.packages("gdata")
mean_for_all_variables <- function(x) {
y=read.xls(x)
all_mean=apply(y,2, FUN=mean)
### glm(counts ~ outcome + treatment, family = poisson())
lin1=glm(y$y ~ y$x1+y$x2+y$x3+y$x4+y$x5) ## dziala
zmienne=ao.hellwig(13,y,"pearson")-1 ### pokazuje jakie zmienne nalezy wrzucic
lin2=glm(y$y ~ y$x3+y$x4+y$x8+y$x10+y$x11 ,family = poisson()) ### z dobrymi zmiennymi objasniajacymi
x1=data.frame(y$x3,y$x4,y$x8,y$x10,y$x11)
# lin3=glm(y~x1, family= poisson())
}
setwd("C:/Users/Anonymous/Desktop/R/Just_one_click_project")
mean_for_all_variables("wokrtest.xlsx")
library("gdata", lib.loc="d:/Program Files/R/R-3.1.3/library")
library("gtools", lib.loc="d:/Program Files/R/R-3.1.3/library")
mean_for_all_variables("wokrtest.xlsx")
mean_for_all_variables("worktest.xlsx")
source('C:/Users/Anonymous/Desktop/R/Just_one_click_project/r_functions/hellwig.R')
mean_for_all_variables("worktest.xlsx")
mean_for_all_variables("worktest.xlsx")
x=mean_for_all_variables("worktest.xlsx")
x
source('C:/Users/Anonymous/Desktop/R/Just_one_click_project/r_functions/mean_for_all_variables.R')
install.packages("gdata")
library("gdata", lib.loc="d:/Program Files/R/R-3.1.3/library")
source('~/.active-rstudio-document')
x=mean_for_all_variables("worktest.xlsx")
x
source('~/.active-rstudio-document')
x=mean_for_all_variables("worktest.xlsx")
x
source('C:/Users/Anonymous/Desktop/R/Just_one_click_project/r_functions/summary_for_all_variables.R')
x=summary_for_all_variables("worktest.xlsx")
x
